

/* ci.edl - Top EDL file. */

/* Here we define the compiler enclave of ci, there are two apis: */
/* compiler2_init */
/* compile_method() */

enclave {

    //from "LocalAttestationCode/LocalAttestationCode.edl" import *;
    from "SysEnvironment/sgx_time.edl" import *;
    // from "sgx_tstdc.edl" import sgx_thread_wait_untrusted_event_ocall, sgx_thread_set_untrusted_event_ocall, sgx_thread_setwait_untrusted_events_ocall, sgx_thread_set_multiple_untrusted_events_ocall;

    // from "EnclaveUtil/util.edl" import *;

    from "IO/sgx_stdlib.edl" import *;
    from "IO/sgx_fcntl.edl" import *;
    from "IO/sgx_unistd.edl" import *;
    from "IO/sgx_stdio.edl" import *;

    trusted {
        /* define ECALLs here. */
        // include "compiler/abstractCompiler.hpp"
        include "enclave/securecompiler.h"
        public void* c1_initialize([user_check]void* cpuid, [user_check]void** top, [user_check]void** bottom, [user_check]void** klass_list, int debug);
        public void gc_scavenge([user_check]void* tasks, int n);
        public int within_enclave([user_check]void *addr);
        public void* interpreted_entry_zero_locals([user_check]void* rbx, [user_check]void* method, [user_check]int* has_exception);
        // public void c1_compile_method([user_check]ciEnv* env,[user_check] ciMethod* target, int entry_bci);
    };
    untrusted {
        void* ocall_interpreter([user_check]void* r14, int size, [user_check]void* method, [user_check]void* thread, [user_check]void* sender);
        void ocall_klass_compute_oopmap([user_check]void* klass, [user_check]void* m, int bci);
        void* ocall_jvm_malloc(int size);
        void* ocall_classfile_buffer([in, string]const char* name, [out, count=4]int *size);
    };

};
